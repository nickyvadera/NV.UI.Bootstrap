@inject IComponentCssHelperFactory componentCssHelperFactory

@if (string.IsNullOrEmpty(Href))
{
    <button class="@GetCssClasses()" type="@Type.GetDescription()" disabled=@Disabled onclick=@OnClickCallback>@ChildContent</button>
}
else
{
    <a class="@GetCssClasses()" href=@Href onclick=@OnClickCallback role="button">@ChildContent</a>
}

@code {
    public enum ButtonType { Submit, Button, Reset }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public Enums.ButtonContext Context { get; set; } = Enums.ButtonContext.Primary;

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public string Href { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnClickCallback { get; set; }

    [Parameter]
    public bool Outline { get; set; }

    [Parameter]
    public Enums.Size Size { get; set; } = Enums.Size.Default;

    [Parameter]
    public IStyleBuilder StyleBuilder { get; set; }

    [Parameter]
    public ButtonType Type { get; set; } = ButtonType.Button;

    private string GetCssClasses()
    {
        return componentCssHelperFactory.Create("btn")
            .AddConditionalClass(!string.IsNullOrEmpty(Href) && Disabled, "disabled")
            .AddEnumModifier(Context, Outline ? "outline" : null)
            .AddEnumModifier(Size)
            .AddStyleBuilder(StyleBuilder)
            .Build();
    }
}