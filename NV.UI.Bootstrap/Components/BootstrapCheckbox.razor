@inject IComponentCssHelperFactory componentCssHelperFactory
@inject IHtmlHelper htmlHelper

@if (string.IsNullOrEmpty(Label) && Type != CheckboxType.Switch)
{
    <div>
        <input class="@GetInputCssClasses()" checked=@Checked disabled="@Disabled" type="@GetHtmlType()" value=@Value @onchange="HandleChange">
    </div>
}
else
{
    <div class="@GetCssClasses()">
        <input class="@GetInputCssClasses()" checked=@Checked disabled="@Disabled" id="@htmlId" type="@GetHtmlType()" value=@Value @onchange="HandleChange">
        <label class="form-check-label" for="@htmlId">@Label</label>
    </div>
}

@code {
    public enum CheckboxType { Checkbox, Radio, Switch }

    private string htmlId;
    private bool isDirty;

    [Parameter]
    public bool AlwaysShowValidity { get; set; }

    [Parameter]
    public bool Checked { get; set; }

    [Parameter]
    public EventCallback<bool> CheckedChanged { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public bool Inline { get; set; }

    [Parameter]
    public bool IsInvalid { get; set; }

    [Parameter]
    public bool IsValid { get; set; }

    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> OnChangeCallback { get; set; }

    [Parameter]
    public CheckboxType Type { get; set; } = CheckboxType.Checkbox;

    [Parameter]
    public string Value { get; set; }

    protected override void OnInitialized()
    {
        htmlId = htmlHelper.GenerateId();
    }

    private string GetCssClasses()
    {
        return componentCssHelperFactory.Create("form-check")
            .AddConditionalClass(Type == CheckboxType.Switch, "form-switch")
            .AddConditionalModifier(Inline, "inline")
            .Build();
    }

    private string GetInputCssClasses()
    {
        return componentCssHelperFactory.Create("form-check-input")
            .AddConditionalClass(IsInvalid && (isDirty || AlwaysShowValidity), "is-invalid")
            .AddConditionalClass(IsValid && (isDirty || AlwaysShowValidity), "is-valid")
            .Build();
    }

    private string GetHtmlType()
    {
        return Type switch
        {
            CheckboxType.Checkbox => "checkbox",
            CheckboxType.Switch => "checkbox",
            CheckboxType.Radio => "radio",
            _ => string.Empty
        };
    }

    private async Task HandleChange(ChangeEventArgs e)
    {
        isDirty = true;
        await OnChangeCallback.InvokeAsync(e);
        await CheckedChanged.InvokeAsync((bool)e.Value);
    }
}